@article{trusting_trust,
author = {Thompson, Ken},
title = {Reflections on trusting trust},
year = {1984},
issue_date = {Aug 1984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {27},
number = {8},
issn = {0001-0782},
url = {https://doi.org/10.1145/358198.358210},
doi = {10.1145/358198.358210},
abstract = {To what extent should one trust a statement that a program is free of Trojan horses? Perhaps it is more important to trust the people who wrote the software.},
journal = {Commun. ACM},
month = {aug},
pages = {761–763},
numpages = {3}
}

@INPROCEEDINGS{ddc_paper,
  author={Wheeler, D.A.},
  booktitle={21st Annual Computer Security Applications Conference (ACSAC'05)}, 
  title={Countering trusting trust through diverse double-compiling}, 
  year={2005},
  volume={},
  number={},
  pages={13 pp.-48},
  keywords={Computer security;Application software},
  doi={10.1109/CSAC.2005.17}}

@thesis{ddc_phd,
  author={Wheeler, D.A.},
  title={Fully Countering Trusting Trust through Diverse Double-Compiling},
  publisher={George Mason University},
  year={2009}}

@INPROCEEDINGS{airforce,
  author={Karger, P.A. and Schell, R.R.},
  booktitle={18th Annual Computer Security Applications Conference, 2002. Proceedings.}, 
  title={Multics security evaluation: vulnerability analysis}, 
  year={2002},
  volume={},
  number={},
  pages={127-146},
  keywords={Military computing;Computer security;Control systems;Data security;Information security;Time sharing computer systems;Operating systems;Hardware;Electrostatic discharge;Application software},
  doi={10.1109/CSAC.2002.1176286}}

@INPROCEEDINGS{airforce_followup,
  author={Karger, P.A. and Schell, R.R.},
  booktitle={18th Annual Computer Security Applications Conference, 2002. Proceedings.}, 
  title={Thirty years later: lessons from the Multics security evaluation}, 
  year={2002},
  volume={},
  number={},
  pages={119-126},
  keywords={Computer security;Operating systems;Communication system security;Application software;Protection;Internet;Data security;Microcomputers;Grid computing;Communication standards},
  doi={10.1109/CSAC.2002.1176285}}

@misc{ReproducibleBuildsOrg,
  author = {{Reproducible Builds}},
  title = {Reproducible Builds Website},
  url = {https://reproducible-builds.org/}
}

@misc{bootstrappableorg,
  author = {{Bootstrappable Builds}},
  title = {Bootstrappable Builds},
  url = {https://bootstrappable.org}}

@misc{guixreducesbootstrapseed,
  title={Guix Further Reduces Bootstrap Seed to 25%},
  url={https://guix.gnu.org/en/blog/2020/guix-further-reduces-bootstrap-seed-to-25/},
  journal={Blog — GNU Guix},
  author={Nieuwenhuizen, Jan},
  year={2020},
  month={Jun}} 

@misc{guixfullsource,
  title={The Full-Source Bootstrap: Building from source all the way down},
  url={https://guix.gnu.org/en/blog/2023/the-full-source-bootstrap-building-from-source-all-the-way-down/},
  journal={Blog — GNU Guix},
  author={Nieuwenhuizen, J. and Courtès, L.},
  year={2023},
  month={Apr}}

@misc{v8bytecode,
  title={Understanding V8’s Bytecode},
  url={https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775},
  author={Hinkelmann, F.},
  year={2017},
  month={Aug}}

@misc{v8website,
  title={V8 JavaScript engine},
  url={https://v8.dev}}

@article{surviving_software_deps,
author = {Cox, Russ},
title = {Surviving software dependencies},
year = {2019},
issue_date = {September 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {62},
number = {9},
issn = {0001-0782},
url = {https://doi.org/10.1145/3347446},
doi = {10.1145/3347446},
abstract = {Software reuse is finally here but comes with risks.},
journal = {Commun. ACM},
month = {aug},
pages = {36–43},
numpages = {8}
}
@inproceedings{s2s_translations,
author = {Albrecht, Paul F. and Garrison, Philip E. and Graham, Susan L. and Hyerle, Robert H. and Ip, Patricia and Krieg-Br\"{u}ckner, Bernd},
title = {Source-to-source translation: Ada to Pascal and Pascal to Ada},
year = {1980},
isbn = {0897910303},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/948632.948658},
doi = {10.1145/948632.948658},
abstract = {An implementation of translators between Ada and Pascal is described. The method used is to define subsets of each language between which there is a straightforward translation and to translate each source program to its respective sublanguage by program transformations. A common internal tree representation is used. The underlying organization of the translators is described, and some of the difficulties we have confronted and solves are discussed.},
booktitle = {Proceedings of the ACM-SIGPLAN Symposium on Ada Programming Language},
pages = {183–193},
numpages = {11},
location = {Boston, Massachusetts},
series = {SIGPLAN '80}
}

@book{dragonbook,
  title = {Compilers: Principles, Techniques, and Tools},
  author = {A. Aho and M. Lam and R. Sethi and J. Ullman},
  year = 2007,
  publisher = "Pearson Education Limited",
  isbn = "978-1-292-02434-9"
}

@other{gospec,
  title={The Go Programming Language Specification. Language version go1.22 (Feb 6, 2024)},
  author={{The Go Authors}},
  url={https://go.dev/ref/spec},
  year=2024,
  month=Feb}

@other{nih,
  title={Running the “Reflections on Trusting Trust” Compiler},
  author={Russ Cox},
  url={https://research.swtch.com/nih},
  year=2023,
  month=Oct}

@webpage{gokrazy,
  title={Gokrazy},
  author={{The Gokrazy authors}},
  url={https://gokrazy.org/},
  year=2024,
  accessed={2024-05-09}}

@online{kubernetes,
  title={Production-Grade Container Orchestration},
  author={{The Kubernetes authors}},
  url={https://kubernetes.io},
  year=2024}

@online{gogc,
  title={Introduction to the Go compiler},
  author={{The Go Authors}},
  url={https://github.com/golang/go/blob/master/src/cmd/compile/README.md},
  year=2024}

@online{gorebuild,
  title={Perfectly Reproducible, Verified Go Toolchains},
  author={{Russ Cox}},
  url={https://go.dev/blog/rebuild},
  year=2023,
  month=Aug}

% Analysis of 174 malicious software packages that were used in
% real-world attacks on open source software supply chains
@InProceedings{reviewofosssupplychains,
author="Ohm, Marc
and Plate, Henrik
and Sykosch, Arnold
and Meier, Michael",
editor="Maurice, Cl{\'e}mentine
and Bilge, Leyla
and Stringhini, Gianluca
and Neves, Nuno",
title="Backstabber's Knife Collection: A Review of Open Source Software Supply Chain Attacks",
booktitle="Detection of Intrusions and Malware, and Vulnerability Assessment",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="23--43",
abstract="A software supply chain attack is characterized by the injection of malicious code into a software package in order to compromise dependent systems further down the chain. Recent years saw a number of supply chain attacks that leverage the increasing use of open source during software development, which is facilitated by dependency managers that automatically resolve, download and install hundreds of open source packages throughout the software life cycle. Even though many approaches for detection and discovery of vulnerable packages exist, no prior work has focused on malicious packages. This paper presents a dataset as well as analysis of 174 malicious software packages that were used in real-world attacks on open source software supply chains and which were distributed via the popular package repositories npm, PyPI, and RubyGems. Those packages, dating from November 2015 to November 2019, were manually collected and analyzed. This work is meant to facilitate the future development of preventive and detective safeguards by open source and research communities.",
isbn="978-3-030-52683-2",
doi={10.1007/978-3-030-52683-2_2}
}

% Reproducible Builds: The Paper
@ARTICLE{reproduciblebuilds,
  author={Lamb, Chris and Zacchiroli, Stefano},
  journal={IEEE Software},
  title={Reproducible Builds: Increasing the Integrity of Software Supply Chains},
  year={2022},
  volume={39},
  number={2},
  pages={62-70},
  keywords={Software;Linux;Supply chains;Reproducibility of results;Metadata;Buildings;Tools},
  doi={10.1109/MS.2021.3073045}}

@INPROCEEDINGS{taxonomy_supply_chains,
  author={Ladisa, Piergiorgio and Plate, Henrik and Martinez, Matias and Barais, Olivier},
  booktitle={2023 IEEE Symposium on Security and Privacy (SP)}, 
  title={SoK: Taxonomy of Attacks on Open-Source Software Supply Chains}, 
  year={2023},
  volume={},
  number={},
  pages={1509-1526},
  keywords={Surveys;Visualization;Costs;Taxonomy;Supply chains;Malware;Security;Open Source;Security;Software Supply Chain;Malware;Attack},
  doi={10.1109/SP46215.2023.10179304}}
@ARTICLE{peerreview,
  author={Rigby, Peter and Cleary, Brendan and Painchaud, Frederic and Storey, Margaret-Anne and German, Daniel},
  journal={IEEE Software}, 
  title={Contemporary Peer Review in Action: Lessons from Open Source Development}, 
  year={2012},
  volume={29},
  number={6},
  pages={56-61},
  keywords={Software quality;Agile manufacturing;Programming;Electronic mail;Software engineering;Software development;software quality;software peer review;inspection;agile development;open source software development},
  doi={10.1109/MS.2012.24}}

@article{og_bootstrap,
author = {Masterson, Kleber S.},
title = {Compilation for two computers with NELIAC},
year = {1960},
issue_date = {Nov. 1960},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/367436.367477},
doi = {10.1145/367436.367477},
abstract = {NELIAC, a compiler based on ALGOL, was developed at the U. S. Navy Electronics Laboratory, San Diego, California, as a “bootstrap” compiler for the Remington Rand Univac COUNTESS computer. This compiler was used to generate a version of itself which, running as a COUNTESS program, generated machine code for the Control Data Corporation CDC-1604 computer. This second compiler was then used to generate a version of NELIAC for the CDC-1604. All three versions of NELIAC accepted essentially identical input language.},
journal = {Commun. ACM},
month = {nov},
pages = {607–611},
numpages = {5}
}
@article{freebsd,
author = {Jørgensen, Niels},
title = {Putting it all in the trunk: incremental software development in the FreeBSD open source project},
journal = {Information Systems Journal},
volume = {11},
number = {4},
pages = {321-336},
keywords = {Incremental development, maintenance, motivation, open source},
doi = {10.1046/j.1365-2575.2001.00113.x},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1046/j.1365-2575.2001.00113.x},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1046/j.1365-2575.2001.00113.x},
abstract = {Abstract. Software development in the FreeBSD project is incremental in the sense that a stream of contributions, including bugfixes and minor and major new features, go into a single branch in the repository, the development branch (or ‘trunk’), and are required to preserve the software in a working state. This creates a succession of development releases, akin to the practice of frequent releasing argued by Eric S. Raymond in his essay ‘The Cathedral and the Bazaar’ to be the key to the success of Linux and other open source projects. The positive and negative impact of this approach is discussed based on a survey involving 72 project participants. On the positive side, the data indicate that it creates a highly motivating ‘see bug, fix bug, see bug fixed in new release’ life cycle, and helps integrate bugfixing with new development. On the negative side, the data indicates that the highly incremental model does not support the development of complex new features.},
year = {2001}
}
@ARTICLE{openbsd,
  author={Shi, Jian and Zou, Deqing and Xu, Shouhuai and Deng, Xianjun and Jin, Hai},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={Does OpenBSD and Firefox’s Security Improve With Time?}, 
  year={2023},
  volume={20},
  number={4},
  pages={2781-2793},
  keywords={Software;Security;Computer bugs;Software systems;Databases;Codes;Big Data;Dependability;security;vulnerability;vulnerability metric},
  doi={10.1109/TDSC.2022.3153325}}

@article{rices_theorem,
 ISSN = {00029947},
 doi = {10.2307/1990888},
 author = {H. G. Rice},
 journal = {Transactions of the American Mathematical Society},
 number = {2},
 pages = {358--366},
 publisher = {American Mathematical Society},
 title = {Classes of Recursively Enumerable Sets and Their Decision Problems},
 urldate = {2024-05-23},
 volume = {74},
 year = {1953}
}

@InProceedings{guix_hpc,
author="Court{\`e}s, Ludovic
and Wurmus, Ricardo",
editor="Hunold, Sascha
and Costan, Alexandru
and Gim{\'e}nez, Domingo
and Iosup, Alexandru
and Ricci, Laura
and G{\'o}mez Requena, Mar{\'i}a Engracia
and Scarano, Vittorio
and Varbanescu, Ana Lucia
and Scott, Stephen L.
and Lankes, Stefan
and Weidendorfer, Josef
and Alexander, Michael",
title="Reproducible and User-Controlled Software Environments in HPC with Guix",
booktitle="Euro-Par 2015: Parallel Processing Workshops",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="579--591",
abstract="Support teams of high-performance computing (HPC) systems often find themselves between a rock and a hard place: on one hand, they understandably administrate these large systems in a conservative way, but on the other hand, they try to satisfy their users by deploying up-to-date tool chains as well as libraries and scientific software. HPC system users often have no guarantee that they will be able to reproduce results at a later point in time, even on the same system---software may have been upgraded, removed, or recompiled under their feet, and they have little hope of being able to reproduce the same software environment elsewhere. We present GNU Guix and the functional package management paradigm and show how it can improve reproducibility and sharing among researchers with representative use cases.",
isbn="978-3-319-27308-2",
doi={10.1007/978-3-319-27308-2_47}
}

@inproceedings{nix,
  author       = {Eelco Dolstra and
                  Merijn de Jonge and
                  Eelco Visser},
  editor       = {Lee Damon},
  title        = {Nix: {A} Safe and Policy-Free System for Software Deployment},
  booktitle    = {Proceedings of the 18th Conference on Systems Administration {(LISA}
                  2004), Atlanta, USA, November 14-19, 2004},
  pages        = {79--92},
  publisher    = {{USENIX}},
  year         = {2004},
  url          = {http://www.usenix.org/publications/library/proceedings/lisa04/tech/dolstra.html},
  timestamp    = {Tue, 02 Feb 2021 08:06:11 +0100},
  biburl       = {https://dblp.org/rec/conf/lisa/DolstraJV04.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{nixos,
  author       = {Eelco Dolstra and
                  Andres L{\"{o}}h},
  editor       = {James Hook and
                  Peter Thiemann},
  title        = {NixOS: a purely functional Linux distribution},
  booktitle    = {Proceeding of the 13th {ACM} {SIGPLAN} international conference on
                  Functional programming, {ICFP} 2008, Victoria, BC, Canada, September
                  20-28, 2008},
  pages        = {367--378},
  publisher    = {{ACM}},
  year         = {2008},
  url          = {https://doi.org/10.1145/1411204.1411255},
  doi          = {10.1145/1411204.1411255},
  timestamp    = {Fri, 25 Jun 2021 14:48:54 +0200},
  biburl       = {https://dblp.org/rec/conf/icfp/DolstraL08.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{observables,
author = {Ohm, Marc and Sykosch, Arnold and Meier, Michael},
title = {Towards detection of software supply chain attacks by forensic artifacts},
year = {2020},
isbn = {9781450388337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3407023.3409183},
doi = {10.1145/3407023.3409183},
abstract = {Third-party dependencies may introduce security risks to the software supply chain and hence yield harm to their dependent software. There are many known cases of malicious open source packages posing risks to developers and end users. However, while efforts are made to detect vulnerable open source packages, malicious packages are not yet considered explicitly. In order to tackle this problem we perform an exploratory case study on previously occurred attacks on the software supply chain with respect to observable artifacts created. Based on gained insights, we propose Buildwatch, a framework for dynamic analysis of software and its third-party dependencies. We noticed that malicious packages introduce a significant amount of new artifacts during installation when compared to benign versions of the same package. The paper presents a first analysis of observable artifacts of malicious packages as well as a possible mitigation strategy that might lead to more insight in long term.},
booktitle = {Proceedings of the 15th International Conference on Availability, Reliability and Security},
articleno = {65},
numpages = {6},
keywords = {DevSecOps, application security, malware, supply chain attack},
location = {Virtual Event, Ireland},
series = {ARES '20}
}

@article{deboostrapping_without_archeology,
  author       = {Nathana{\"{e}}lle Courant and
                  Julien Lepiller and
                  Gabriel Scherer},
  title        = {Debootstrapping without Archeology - Stacked Implementations in Camlboot},
  journal      = {Art Sci. Eng. Program.},
  volume       = {6},
  number       = {3},
  pages        = {13},
  year         = {2022},
  url          = {https://doi.org/10.22152/programming-journal.org/2022/6/13},
  doi          = {10.22152/PROGRAMMING-JOURNAL.ORG/2022/6/13},
  timestamp    = {Thu, 31 Mar 2022 17:13:20 +0200},
  biburl       = {https://dblp.org/rec/journals/programming/CourantLS22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@book{geb_egb,
author = {Hofstadter, Douglas R.},
title = {Gödel, Escher, Bach: An Eternal Golden Braid},
year = {1999},
isbn = {0465026567},
publisher = {Basic Books, Inc.},
address = {USA},
abstract = {From the Publisher:This groundbreaking Pulitzer Prize-winning book sets the standard for interdisciplinary writing, exploring the patterns and symbols in the thinking of mathematician Kurt Godel, artist M.C. Escher, and composer Johann Sebastian Bach.}
}
